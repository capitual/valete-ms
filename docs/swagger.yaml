definitions:
  dtos.PartnerDto:
    properties:
      country:
        type: string
      locale:
        type: string
      partner_name:
        type: string
    type: object
  handlers.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  handlers.HTTPUnauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Unauthorized
        type: string
    type: object
  handlers.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /internals/partners:
    get:
      consumes:
      - application/json
      description: Get all partner
      parameters:
      - description: int valid
        in: query
        name: page
        type: integer
      - description: int valid
        in: query
        name: size
        type: integer
      - description: string valid
        in: query
        name: filter
        type: string
      - description: api secret
        in: header
        name: x-api-secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.HTTPUnauthorized'
      summary: Get All Partner
      tags:
      - partners
    post:
      consumes:
      - application/json
      description: Create a new partner to consuming our api
      parameters:
      - description: Add Partner
        in: body
        name: partner
        required: true
        schema:
          $ref: '#/definitions/dtos.PartnerDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HTTPError'
      summary: New Partner
      tags:
      - partners
  /internals/partners/{id}:
    get:
      consumes:
      - application/json
      description: get partner by id
      parameters:
      - description: Partner id
        in: path
        name: id
        required: true
        type: integer
      - description: api secret
        in: header
        name: x-api-secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.HTTPUnauthorized'
      summary: Get Partner
      tags:
      - partners
  /internals/partners/revogate/{id}:
    put:
      consumes:
      - application/json
      description: Revogate partner to use our api
      parameters:
      - description: Partner id
        in: path
        name: id
        required: true
        type: integer
      - description: api secret
        in: header
        name: x-api-secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.HTTPUnauthorized'
      summary: Revogate Partner
      tags:
      - partners
swagger: "2.0"
